<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>loz4</title><link href="http://www.loz4.com/" rel="alternate"></link><link href="http://www.loz4.com/feeds/loz4.atom.xml" rel="self"></link><id>http://www.loz4.com/</id><updated>2014-08-18T21:57:00+08:00</updated><entry><title>建站加载慢，可以这么办</title><link href="http://www.loz4.com/pages/2014/08/pelican-speed-in-china" rel="alternate"></link><updated>2014-08-18T21:57:00+08:00</updated><author><name>loz4</name></author><id>tag:www.loz4.com,2014-08-18:pages/2014/08/pelican-speed-in-china</id><summary type="html">&lt;p&gt; 其实并不局限于 Pelican。至少我看到的大部分相似问题来自 WordPress。&lt;/p&gt;
&lt;p&gt;Pelican 建好站后，就期待着这一亩三分地慢慢成长。But, 每次自己刷页面看效果时都要 20 多秒才搞定。自家的娃还能忍，别人来看估计就没这个耐心。所以抽空把这个不爽 &lt;strong&gt; 暂时 &lt;/strong&gt; 解决了。&lt;/p&gt;
&lt;p&gt; 原因出在为了字体文件，每次进入网站都需要尝试下载托管的字体。有些主题使用的是 google 服务的 Open Sans 字体，而谷哥近来被搞得比较惨。所以在 chrome 下看 F12 就会有这样的情景：  &lt;/p&gt;
&lt;p&gt;&lt;img src=”http://i.imgur.com/9R0D9Zq.jpg” alt=”screenshot” width=”600px” /&gt;
&lt;img alt=" 我是不是该对能连上表示开心 " src="http://i.imgur.com/9R0D9Zq.jpg" /&gt;&lt;/p&gt;
&lt;p&gt; 这 20 秒就只能无奈地面对着图片和页面框架。 &lt;br /&gt;
解决办法只能是从字体文件的获取入手。解决方法因人而异，我这里主要有三个思路：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 把字体文件下下来，然后托管到网站的静态文件夹  &lt;ul&gt;
&lt;li&gt; 方法：可以参考 &lt;a href="http://sudodev.cn/articles/354.html"&gt; 让 wordpress 主题绕开对 google 的依赖 &lt;/a&gt;。&lt;/li&gt;
&lt;li&gt; 优点：自己动手，丰衣足食。国内外连接速度都还好。&lt;/li&gt;
&lt;li&gt; 缺点：从 Github 到本地的下载时间也会有延迟，虽然感谢码农们的争取，很可以接受了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 利用国内的公共库，把主题中相应对字体的引用调整到速度快的某些网站。  &lt;ul&gt;
&lt;li&gt; 方法：可以参考 &lt;a href="http://libs.useso.com/"&gt; 某前端公共库 CDN 服务 &lt;/a&gt;，当然其他很多大户都有类似的服务。&lt;/li&gt;
&lt;li&gt; 优点：只要在国内，速度很爽。改起来很省事，值得表扬。  &lt;/li&gt;
&lt;li&gt; 缺点：吃人嘴短，&lt;strong&gt; 暂时 &lt;/strong&gt; 没节操一阵子。国外连接速度没试，估计不咋样（当然定位本来就是中文博客，无所了）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 破罐子破摔，老子不用 Open Sans 了。&lt;ul&gt;
&lt;li&gt; 方法 : 直接封印了导入字体那部分。甚至可以考虑换个主题 XD&lt;/li&gt;
&lt;li&gt; 优点：Open Sans 和中文没太大关系，影响不大。放哪都不太影响速度。&lt;/li&gt;
&lt;li&gt; 缺点：想了想，好像除了 “ 一般来说主题自己对应的字体还是比较搭调的 ” 外没啥可反驳的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 呃，我 &lt;strong&gt; 暂时 &lt;/strong&gt; 采取的是第二种。中文博客的长期解决办法估计有二：&lt;br /&gt;
1. 整个网站托管到国内的某些 github 类似站上，然后采取上面的方法 1。需要暂时观望一段时间。&lt;br /&gt;
2. 换个字体 / 换个主题。  &lt;/p&gt;
&lt;h3&gt; 另外 &lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;bootstrap 主题的字体位置在 &lt;code&gt;./pelican-bootstrap3/static/css/bootstrap.spacelab.min.css&lt;/code&gt; 的第一行。&lt;/li&gt;
&lt;li&gt; 引自 &lt;a href="http://sudodev.cn/articles/354.html"&gt; 让 wordpress 主题绕开对 google 的依赖 &lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt; 网站中添加的谷歌 analytics 的 js 代码不会对网页加载产生影响。因为它是动态写上去，等网站发起对 ga.js 的请求的时候，网页中该请求的东西都请求完了。所以不会影响，只是有墙的情况下，由于 ga.js 请求不到，会影响 google analytics 对你网站流量监控的准确性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="web"></category><category term="pelican"></category></entry><entry><title>试水Pelican</title><link href="http://www.loz4.com/pages/2014/08/pelican" rel="alternate"></link><updated>2014-08-04T16:31:00+08:00</updated><author><name>loz4</name></author><id>tag:www.loz4.com,2014-08-04:pages/2014/08/pelican</id><summary type="html">&lt;h3&gt; 先扯两句 &lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt; 早前也转战过 WordPress（注册了域名），是好用，但是个人业余维护起来还是复杂，不如把时间省出来，多看书码字搬砖陪妹子。&lt;/p&gt;
&lt;p&gt; 所以最后回归了简单的 Github Pages + Markdown，生成工具出于熟悉 Python 选择了 Pelican 而不是常见的 Jekyll。&lt;/p&gt;
&lt;p&gt; 就快捷 set up 而言，不到 1 个小时（当然要想调教到合自己的胃口就因人而异了）；就使用上，对着本地而不是网页码字，简直舒畅。不如众乐乐，我也来扯扯。&lt;/p&gt;
&lt;h3&gt; 多多搜索 &lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt; 鉴于目前只是小马过河，就专注于一些使用时遇到的细节，不弄整理一步步的流程了。新手如我，可以提供的参考资料主要有 （当然之后随着版本更新，会有更多适合你的）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 必须致敬的 &lt;a href="http://www.yangzhiping.com/tech/writing-space.html"&gt; 理想的写作环境：Git+Github+Markdown+Jekyll&lt;/a&gt;。最早这么做的人一定不是他，但扫了一些经验博文，大多从 WordPress 转过来的人都看过这篇。可见 WordPress 从某种程度上的坑，以及心理科班的说服力。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt; 一步一步打造 Geek 风格的技术博客 &lt;/a&gt;，作者分享精神极赞，把整个网站 make 前的资料尤其是 pelicanconf.py 也放出来。翻翻看能学会很多。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html"&gt; 搭建一个免费的，无限流量的 Blog----github Pages 和 Jekyll 入门 &lt;/a&gt;，我用的不是 Jekyll, 但是这篇太亲和，以致差一点就倒向了 Jekyll。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.skydark.info/programming/2012/03/23/play-with-jekyll/"&gt;Play with Jekyll&lt;/a&gt;, 有许多可借鉴的地方。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/latest/"&gt;Pelican 官方文档 &lt;/a&gt;, 且要翻一阵子这个。。。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dongxf.com/3_Build_Personal_Blog_With_Pelican_And_GitHub_Pages.html"&gt; 用 Pelican 和 GitHub Pages 搭建免费的个人博客 &lt;/a&gt;，中文 Pelican 的一个不错的总结。但是我想说。。。博主你这么快就不更新了是要做反例么！！补一句，那个 theme 并不是 bootstrap3, 而是 &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/tuxlite_tbs"&gt;tuxlite_tbs&lt;/a&gt;。配色赞的很，上面的 &lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt; 一步一步打造 Geek 风格的技术博客 &lt;/a&gt; 用的也是这个。如果驾驭不了 bootstrap3 的话，我说不定也投奔它了 XD。&lt;/li&gt;
&lt;li&gt; 如果熟悉英文，还可以参考 &lt;a href="http://arunrocks.com/moving-blogs-to-pelican/"&gt; 从 WP 到 Jekyll 到 Pelican 的感想 &lt;/a&gt;，&lt;a href="http://terriyu.info/blog/posts/2013/07/pelican-setup/"&gt; 实践 &lt;/a&gt;，以及 &lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;Disqus&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt; 水有多深？&lt;/h3&gt;
&lt;hr /&gt;
&lt;h4&gt;Git 相关 &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; 不懂 git？&lt;/strong&gt;&lt;br /&gt;
    没事，&lt;a href="https://try.github.io/levels/1/challenges/1"&gt;15 分钟轻松速成 &lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 不懂 git，还懒得看英文？&lt;/strong&gt;&lt;br /&gt;
    没事，&lt;a href="http://rogerdudler.github.io/git-guide/index.zh.html"&gt;git - 简明指南 &lt;/a&gt;；&lt;br /&gt;
    或者再深入点。&lt;a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"&gt;Git 教程 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 不懂 git，还懒得看英文，看了网页还不理解？&lt;/strong&gt;&lt;br /&gt;
    居然还能对 Pelican 这么 geeky 的存在感兴趣？那可以边用边学嘛。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Markdown 相关 &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; 咋用？&lt;/strong&gt;&lt;br /&gt;
&lt;a href="http://markdown.tw/"&gt; 基本语法 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 不好用？&lt;/strong&gt;&lt;br /&gt;
    在熟悉咋用前，一个即时生成的编辑器很重要 &lt;ul&gt;
&lt;li&gt;Max OS 下无疑问 Mou&lt;/li&gt;
&lt;li&gt;Win 下推荐 MarkdownPad2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt; 下水后 &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; 日期格式？&lt;/strong&gt;&lt;br /&gt;
    如下。其中 &lt;code&gt;%Y 年 %m 月 %d 日 , 周 %a&lt;/code&gt; 可以自由搭配。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Asia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Shanghai&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;zh&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;zh_CN&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="err"&gt; 年 &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt; 月 &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt; 日 &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt; 周 &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disqus 无法成功加载？&lt;/strong&gt; &lt;br /&gt;
    把配置文件中的 &lt;code&gt;SITEUR = “”&lt;/code&gt; 改成自己的地址。关闭 RELATIVE_URLS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 抬头 Menu 要 About，不要 Category？&lt;/strong&gt; &lt;br /&gt;
    About 的源文件要放在 &lt;code&gt;./content/pages&lt;/code&gt; 文件夹里。&lt;code&gt;DISPLAY_CATEGORIES_ON_MENU = False&lt;/code&gt; 可以关闭 Category 的显示 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 找不到关于 Google 站内搜索的教程？&lt;/strong&gt;&lt;br /&gt;
    原博客挂了。可以参考这里：&lt;a href="http://blog.lanbing.org/2013.cgi"&gt;Pelican 添加自定义搜索 &lt;/a&gt;。&lt;br /&gt;
    或者看 &lt;a href="https://github.com/lizherui/lizherui.github.io"&gt;lizherui 的文件 &lt;/a&gt;（添加 &lt;code&gt;search.html&lt;/code&gt; 放置搜索输出 , 修改相应的 template、css 和配置文件）。&lt;br /&gt;
    我的 theme 排版不同，暂时不添加这个。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FILES_TO_COPY 失效？&lt;/strong&gt;&lt;br /&gt;
    已经在新版本中弃用，采用了 EXTRA_PATH_METADATA&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make html 还是 make publish？&lt;/strong&gt;&lt;br /&gt;
    翻了翻 Makefile。我这里它们是一样的，取决于你用的是 &lt;code&gt;pelicanconf.py&lt;/code&gt; 还是 &lt;code&gt;publishconf.py&lt;/code&gt;。甚至你可以自己定义一个文件作配置。岔开来说，能感觉到玩腻 &lt;a href="http://docs.getpelican.com/en/latest/settings.html"&gt; 配置 &lt;/a&gt; 后，下一步就该玩 Makefile 了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 为啥加载速度那么慢？&lt;/strong&gt;&lt;br /&gt;
    可以看看 chrome 的 f12 中 network 相关的加载速度（ctrl+f5 强制刷新刷）。一般来说，优先考虑主题中某些比如谷哥的服务被挡，或者是字体文件太大（因为本身 github 在国内的速度也不乐观）。前者更为制约。所以要么通过下载相应的文件并在主题里进行修改，要么通过国内的服务商提供的常用前端公共库。具体可以参考 &lt;a href="http://www.loz4.com/pages/2014/08/pelican-speed-in-china"&gt; 这篇日志 &lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="web"></category><category term="pelican"></category></entry><entry><title>Hello world of loz4</title><link href="http://www.loz4.com/pages/2014/08/hello-world" rel="alternate"></link><updated>2014-08-04T16:30:00+08:00</updated><author><name>loz4</name></author><id>tag:www.loz4.com,2014-08-04:pages/2014/08/hello-world</id><summary type="html">&lt;p&gt; 抬头的站名取的是象形，码农和宅男都懂，但愿能坚持维护这个地方。&lt;/p&gt;</summary></entry><entry><title>简单WordPress建站笔记</title><link href="http://www.loz4.com/pages/2014/01/wordpress-simple" rel="alternate"></link><updated>2014-01-27T17:35:00+08:00</updated><author><name>loz4</name></author><id>tag:www.loz4.com,2014-01-27:pages/2014/01/wordpress-simple</id><summary type="html">&lt;p&gt;&lt;strong&gt; 按：这是之前挂在 WordPress 站上的日志。现已加入 Github Pages + Pelican。不过还是整理一下，当作纪念吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 一年来趁着闲的时候偶尔搞了搞网站。但反反复复总会疏漏一些细节。现在小归纳一下，以供参考。&lt;/p&gt;
&lt;h3&gt; 域名和主机之获取 &lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;loz4 目前是在 &lt;a href="http://namecheap.com"&gt;Namecheap&lt;/a&gt; 注册的域名，&lt;a href="http://www.hawkhost.com"&gt;Hawkhost&lt;/a&gt; 的一年吊丝主机，用得还算顺畅。&lt;a href="http://namecheap.com"&gt;Namecheap&lt;/a&gt; 比较推荐，基本逢节假日会有 1 刀的优惠，不过需要信用卡或 paypal。&lt;a href="http://www.hawkhost.com"&gt;Hawkhost&lt;/a&gt;，根据其 logo 俗称老鹰主机，基本也算比较适合新手上路的价格。  &lt;/p&gt;
&lt;p&gt; 具体的注册购买方法网上已经有很多介绍，之后有时间再写。注意一般先有了域名然后去注册主机，否则之后还需要重新发信更改默认域名（primary domain）。 &lt;/p&gt;
&lt;h3&gt; 域名和主机之在一起 &lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt; 主要依靠的是 DNS。这里推荐使用国产 &lt;a href="http://www.dnspod.cn"&gt;DNSPOD&lt;/a&gt;。&lt;br /&gt;
1. 在 Namecheap 里进入域名管理，点击左侧 &lt;code&gt;"General"&lt;/code&gt; 下的 &lt;code&gt;"Domain Name Server Setup"&lt;/code&gt;，选择 &lt;code&gt;"Specify Custom DNS Servers ( Your own DNS Servers )"&lt;/code&gt;, 加入 &lt;code&gt;f1g1ns1.dnspod.net&lt;/code&gt; 和 &lt;code&gt;f1g1ns2.dnspod.net&lt;/code&gt;。&lt;br /&gt;
2. 确保 &lt;a href="http://www.hawkhost.com"&gt;Hawkhost&lt;/a&gt; 的默认域名，找到购买时发的带有 ip 地址的邮件。记下 ip &lt;br /&gt;
3. 去 &lt;a href="http://www.dnspod.cn"&gt;DNSPOD&lt;/a&gt; 添加域名，保留两条指向 &lt;code&gt;f1g1ns1.dnspod.net&lt;/code&gt; 和 &lt;code&gt;f1g1ns2.dnspod.net&lt;/code&gt; 的 NS 记录（好像也删不掉）。然后再加两个 A 记录，分别指向 @ 和 www，记录值是 &lt;a href="http://www.hawkhost.com"&gt;Hawkhost&lt;/a&gt; 提供的 ip。此间可能会有一阵子异常，毕竟 DNS 更新需要时间，但一般半天到一天后无论访问 &lt;a href="http://www.loz4.com"&gt;http://www.loz4.com&lt;/a&gt; 还是 &lt;a href="http://loz4.com"&gt;http://loz4.com&lt;/a&gt; 都应该顺畅无压力了。等待 DNS 更新也别闲着，可以直接上 WordPress 了。&lt;/p&gt;
&lt;h3&gt;WordPress 和 cPanel&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://www.hawkhost.com"&gt;Hawkhost&lt;/a&gt; 以及大部分主机商都基于傻瓜型的 cPanel 控制面板，所以图文教程可以参考 &lt;a href="http://hugege.com/2009/03/16/cpanel-wordpress-china/comment-page-1/"&gt; 胡戈戈的中文 cPanel 安装 wordpress 教程 &lt;/a&gt;。&lt;/p&gt;</summary><category term="web"></category></entry><entry><title>[R] cor的use参数</title><link href="http://www.loz4.com/pages/2014/01/R-cor-use" rel="alternate"></link><updated>2014-01-26T20:44:00+08:00</updated><author><name>loz4</name></author><id>tag:www.loz4.com,2014-01-26:pages/2014/01/R-cor-use</id><summary type="html">&lt;p&gt; 通常用 cor 计算 PCC 的时候，如果数据都很全面，那皆大欢喜可以无视这个参数。但如果数据中散落一些 NA，那么处理起来就会比较麻烦，甚至影响最终的结果。&lt;/p&gt;
&lt;p&gt;R (R version 3.0.2 (2013-09-25) -- "Frisbee Sailing") 里面的介绍见下 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If ‘use’ is ‘&lt;code&gt;"everything"&lt;/code&gt;’, ‘NA’s will propagate conceptually, i.e., a resulting value will be ‘NA’ whenever one of its contributing observations is ‘NA’.&lt;br /&gt;
If ‘use’ is ‘&lt;code&gt;"all.obs"&lt;/code&gt;’, then the presence of missing observations will produce an error.&lt;br /&gt;
If ‘use’ is ‘&lt;code&gt;"complete.obs"&lt;/code&gt;’ then missing values are handled by casewise deletion (and if there are no complete cases, that gives an error).&lt;br /&gt;
‘&lt;code&gt;"na.or.complete"&lt;/code&gt;’ is the same unless there are no complete cases, that gives ‘NA’.&lt;br /&gt;
Finally, if ‘use’ has the value ‘&lt;code&gt;"pairwise.complete.obs"&lt;/code&gt;’ then the correlation or covariance between each pair of variables is computed using all complete pairs of observations on those variables. This can result in covariance or correlation matrices which are not positive semi-definite, as well as ‘NA’ entries if there are no complete pairs for that pair of variables. For ‘cov’ and ‘var’, ‘&lt;code&gt;"pairwise.complete.obs"&lt;/code&gt;’ only works with the ‘&lt;code&gt;"pearson"&lt;/code&gt;’ method.&lt;br /&gt;
Note that (the equivalent of) ‘var(double(0), use = *)’ gives ‘NA’ for ‘&lt;code&gt;use = "everything"&lt;/code&gt;’ and ‘&lt;code&gt;"na.or.complete"&lt;/code&gt;’, and gives an error in the other cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 简单说，&lt;br /&gt;
1. &lt;code&gt;"everything"&lt;/code&gt; 作为 default，有 NA 结果就全 NA，不报错；&lt;br /&gt;
2. &lt;code&gt;"all.obs"&lt;/code&gt;:，有 NA 结果就全 NA，有 NA 就报错； &lt;br /&gt;
3. &lt;code&gt;"complete.obs"&lt;/code&gt;，计算时只考虑完整的部分，如果没有则报错；&lt;br /&gt;
4. &lt;code&gt;"na.or.complete"&lt;/code&gt;，计算时只考虑完整的部分，如果没有不报错给 NA；&lt;br /&gt;
5. &lt;code&gt;"pairwise.complete.obs"&lt;/code&gt; ，计算时考虑配对间完整的部分，如果没有则报错。&lt;/p&gt;
&lt;p&gt; 关于 &lt;code&gt;"pairwise.complete.obs"&lt;/code&gt; 和 &lt;code&gt;"complete.obs"&lt;/code&gt; 的区别可以举个例子（改自 &lt;a href="http://stackoverflow.com/questions/18892051/complete-obs-of-cor-function"&gt;Stackflow&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; 
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;0.95553437&lt;/span&gt; &lt;span class="mf"&gt;0.4211649&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;0.06432989&lt;/span&gt; &lt;span class="mf"&gt;0.7404416&lt;/span&gt; &lt;span class="n"&gt;NA&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;0.36454235&lt;/span&gt; &lt;span class="mf"&gt;0.1724477&lt;/span&gt; &lt;span class="mf"&gt;0.2983889&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;0.14480942&lt;/span&gt; &lt;span class="mf"&gt;0.6861022&lt;/span&gt; &lt;span class="mf"&gt;0.7692226&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;0.88729339&lt;/span&gt; &lt;span class="mf"&gt;0.7440398&lt;/span&gt; &lt;span class="mf"&gt;0.5458178&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;complete.obs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.3179911&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt;
&lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="mf"&gt;0.3179911&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt;
&lt;span class="n"&gt;V3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pairwise.complete.obs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1523021&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt;
&lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.1523021&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt;
&lt;span class="n"&gt;V3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,],&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;complete.obs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;
&lt;span class="n"&gt;V1&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.3179911&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt;
&lt;span class="n"&gt;V2&lt;/span&gt; &lt;span class="mf"&gt;0.3179911&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt;
&lt;span class="n"&gt;V3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.2597317&lt;/span&gt; &lt;span class="mf"&gt;0.8329635&lt;/span&gt; &lt;span class="mf"&gt;1.0000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; 尽管前两列都是满值，&lt;code&gt;"complete.obs"&lt;/code&gt; 时由于第三列有两个 NA，计算前两列的相关系数的时候也受到影响。所以实践上如果要充分利用有的信息，还是尽量使用 &lt;code&gt;"pairwise.complete.obs"&lt;/code&gt;。&lt;/p&gt;</summary><category term="R"></category></entry></feed>